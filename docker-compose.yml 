version: "3.3"

services:
  shop:
    container_name: shop
    build:
      context: .
      dockerfile: ./docker/shop/Dockerfile
    volumes:
      - ./shop:/app
    networks:
      - shop_db_network
      - celery_sklad
    env_file:
      - docker/shop/.env
    ports:
      - "8000:8000"
    depends_on:
      - db_shop
      - redis
    environment:
      DB_NAME: "shop"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "db_shop"
      DB_PORT: "5432"
    restart: on-failure
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/"]
      interval: 1m
      timeout: 5s
      retries: 2


  shop_celery:
    container_name: shop_celery
    build:
      context: .
      dockerfile: ./docker/shop/Dockerfile
    volumes:
      - ./shop:/app
    networks:
      - shop_db_network
      - celery_sklad
      - warehouse_db_network
    env_file:
      - docker/shop/.env
    depends_on:
      - db_shop
      - rabbitmq
      - redis
      - db_warehouse
    expose:
      - 8000
    environment:
      DB_NAME: "shop"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "db_shop"
      DB_PORT: "5432"
    restart: on-failure
    command: celery -A core worker -B -l INFO
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/" ]
      interval: 1m
      timeout: 5s
      retries: 2


  warehouse:
    container_name: warehouse
    build:
      context: .
      dockerfile: ./docker/warehouse/Dockerfile
    volumes:
      - ./warehouse:/app
    networks:
      - warehouse_db_network
      - celery_sklad
    env_file:
      - docker/warehouse/.env
    ports:
      - "8001:8000"
    depends_on:
      - db_warehouse
      - redis
    environment:
      DB_NAME: "warehouse"
      DB_USER: "postgres"
      DB_PASSWORD: "postgres"
      DB_HOST: "db_warehouse"
      DB_PORT: "5432"
    restart: on-failure
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://0.0.0.0:8000/admin/login/" ]
      interval: 1m
      timeout: 5s
      retries: 2

  db_shop:
    container_name: db_shop
    image:
      postgres:14-alpine
    volumes:
      - db_shop_volume:/var/lib/postgresql/data
    networks:
      - shop_db_network
      - celery_sklad
    expose:
      - 5432
    restart: on-failure
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'shop'


  db_warehouse:
    container_name: db_warehouse
    image:
      postgres:14-alpine
    volumes:
      - db_warehouse_volume:/var/lib/postgresql/data
    networks:
      - warehouse_db_network
      - celery_sklad
    expose:
      - 5432
      - 8000
    restart: on-failure
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres'
      POSTGRES_DB: 'warehouse'

  redis:
    container_name: redis
    image: redis:5.0.6-alpine
    restart: on-failure
    networks:
      - shop_db_network
      - warehouse_db_network
      - celery_sklad
    expose:
      - 6379
    volumes:
      - redis:/var/lib/redis/data
    healthcheck:
      test: [ "CMD", "redis-cli", "-h", "localhost", "ping" ]

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.8.0-alpine
    restart: on-failure
    networks:
      - shop_db_network
      - warehouse_db_network
      - celery_sklad
    expose:
      - 4369
      - 5671
      - 5672
      - 15672
      - 25672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "5672" ]
      interval: 5s
      timeout: 15s
      retries: 1

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog:latest
    command: [ "-smtp-bind-addr", "0.0.0.0:25" ]
    user: root
    restart: on-failure
    networks:
      - shop_db_network
      - warehouse_db_network
      - celery_sklad
    expose:
      - 25
      - 8025
    ports:
      - 1025:1025
      - 8025:8025
      - 5555:5555
    healthcheck:
      test: [ "CMD", "echo", "|", "telnet", "127.0.0.1 25" ]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  shop_db_network:
  warehouse_db_network:
  celery_sklad:
volumes:
  db_shop_volume:
  db_warehouse_volume:
  rabbitmq_data:
  redis:
